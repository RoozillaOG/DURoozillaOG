{"slots":{"0":{"name":"sDisplay","type":{"events":[],"methods":[]}},"1":{"name":"sLight","type":{"events":[],"methods":[]}},"2":{"name":"RefinerOutput","type":{"events":[],"methods":[]}},"3":{"name":"Smelter","type":{"events":[],"methods":[]}},"4":{"name":"SmelterOutput","type":{"events":[],"methods":[]}},"5":{"name":"Metalworks","type":{"events":[],"methods":[]}},"6":{"name":"MetalworksOutput","type":{"events":[],"methods":[]}},"7":{"name":"AssemblyM","type":{"events":[],"methods":[]}},"8":{"name":"AssemblyMOutput","type":{"events":[],"methods":[]}},"9":{"name":"sDataBank","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\n--== start file ..\\Data\\DataCell.lua ==--\n\nif not DataCell then\n  DataCell = {}\n  DataCell.__index = DataCell\n\n  DataCellStatusNormal = \"Normal\"\n  DataCellStatusWarning = \"Warning\"\n  DataCellStatusAlert = \"Alert\"\n  DataCellStatusGood = \"Good\"\n\n  --@param status string one of Normal, Warning, Alert\n  function DataCell(text, status)\n    local self = {\n      [\"data\"] = {\n        text = text,\n        status = status or DataCellStatusNormal\n      }\n    }\n\n    function self.GetText()\n      return self.data.text\n    end\n\n    function self.GetStatus()\n      return self.data.status\n    end\n\n    function self.GetData()\n      return self.data\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataCell.lua ==--\n\n--== start file ..\\Utils\\PureResources.lua ==--\n\nif not PureResources then\n  PureResources = {}\n  PureResources.__index = PureResources\n\n  function PureResources()\n    local self = {\n      idToData = {\n        [2240749601] = { id = 2240749601, displayNameWithSize = \"Pure Aluminium\" },\n        [2112763718] = { id = 2112763718, displayNameWithSize = \"Pure Calcium\" },\n        [159858782] = { id = 159858782, displayNameWithSize = \"Pure Carbon\" },\n        [2147954574] = { id = 2147954574, displayNameWithSize = \"Pure Chromium\" },\n        [2031444137] = { id = 2031444137, displayNameWithSize = \"Pure Cobalt\" },\n        [1466453887] = { id = 1466453887, displayNameWithSize = \"Pure Copper\" },\n        [3323724376] = { id = 3323724376, displayNameWithSize = \"Pure Fluorine\" },\n        [3837955371] = { id = 3837955371, displayNameWithSize = \"Pure Gold\" },\n        [1010524904] = { id = 1010524904, displayNameWithSize = \"Pure Hydrogen\" },\n        [198782496] = { id = 198782496, displayNameWithSize = \"Pure Iron\" },\n        [3810111622] = { id = 3810111622, displayNameWithSize = \"Pure Lithium\" },\n        [2421303625] = { id = 2421303625, displayNameWithSize = \"Pure Manganese\" },\n        [3012303017] = { id = 3012303017, displayNameWithSize = \"Pure Nickel\" },\n        [1126600143] = { id = 1126600143, displayNameWithSize = \"Pure Niobium\" },\n        [947806142] = { id = 947806142, displayNameWithSize = \"Pure Oxygen\" },\n        [3211418846] = { id = 3211418846, displayNameWithSize = \"Pure Scandium\" },\n        [2589986891] = { id = 2589986891, displayNameWithSize = \"Pure Silicon\" },\n        [1807690770] = { id = 1807690770, displayNameWithSize = \"Pure Silver\" },\n        [3603734543] = { id = 3603734543, displayNameWithSize = \"Pure Sodium\" },\n        [3822811562] = { id = 3822811562, displayNameWithSize = \"Pure Sulfur\" },\n        [752542080] = { id = 752542080, displayNameWithSize = \"Pure Titanium\" },\n        [2007627267] = { id = 2007627267, displayNameWithSize = \"Pure Vanadium\" }\n      },\n      displayNameToData = {\n        [\"Pure Aluminium\"] = { id = 2240749601, displayNameWithSize = \"Pure Aluminium\" },\n        [\"Pure Calcium\"] = { id = 2112763718, displayNameWithSize = \"Pure Calcium\" },\n        [\"Pure Carbon\"] = { id = 159858782, displayNameWithSize = \"Pure Carbon\" },\n        [\"Pure Chromium\"] = { id = 2147954574, displayNameWithSize = \"Pure Chromium\" },\n        [\"Pure Cobalt\"] = { id = 2031444137, displayNameWithSize = \"Pure Cobalt\" },\n        [\"Pure Copper\"] = { id = 1466453887, displayNameWithSize = \"Pure Copper\" },\n        [\"Pure Fluorine\"] = { id = 3323724376, displayNameWithSize = \"Pure Fluorine\" },\n        [\"Pure Gold\"] = { id = 3837955371, displayNameWithSize = \"Pure Gold\" },\n        [\"Pure Hydrogen\"] = { id = 1010524904, displayNameWithSize = \"Pure Hydrogen\" },\n        [\"Pure Iron\"] = { id = 198782496, displayNameWithSize = \"Pure Iron\" },\n        [\"Pure Lithium\"] = { id = 3810111622, displayNameWithSize = \"Pure Lithium\" },\n        [\"Pure Manganese\"] = { id = 2421303625, displayNameWithSize = \"Pure Manganese\" },\n        [\"Pure Nickel\"] = { id = 3012303017, displayNameWithSize = \"Pure Nickel\" },\n        [\"Pure Niobium\"] = { id = 1126600143, displayNameWithSize = \"Pure Niobium\" },\n        [\"Pure Oxygen\"] = { id = 947806142, displayNameWithSize = \"Pure Oxygen\" },\n        [\"Pure Scandium\"] = { id = 3211418846, displayNameWithSize = \"Pure Scandium\" },\n        [\"Pure Silicon\"] = { id = 2589986891, displayNameWithSize = \"Pure Silicon\" },\n        [\"Pure Silver\"] = { id = 1807690770, displayNameWithSize = \"Pure Silver\" },\n        [\"Pure Sodium\"] = { id = 3603734543, displayNameWithSize = \"Pure Sodium\" },\n        [\"Pure Sulfur\"] = { id = 3822811562, displayNameWithSize = \"Pure Sulfur\" },\n        [\"Pure Titanium\"] = { id = 752542080, displayNameWithSize = \"Pure Titanium\" },\n        [\"Pure Vanadium\"] = { id = 2007627267, displayNameWithSize = \"Pure Vanadium\" }\n      }\n    }\n\n    function self.GetId(displayName)\n      if(self.displayNameToData[displayName]) then\n        return self.displayNameToData[displayName].id\n      end\n      return -1\n    end\n\n    function self.GetDisplayName(id)\n      if(self.idToData[id]) then\n        return self.idToData[id].displayNameWithSize\n      end\n            \n      local item = system.getItem(id)\n      if(item and item.displayNameWithSize) then\n        return item.displayNameWithSize\n      end\n    \n      return \"\"\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Utils\\PureResources.lua ==--\n\n--== start file .\\DisplayData.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"../Mock/industry.lua\"\n--==require \"../Industry/IndustryData.lua\"\n\nif not DisplayData then\n  DisplayData = {}\n  DisplayData.__index = DisplayData\n\n  ---@param dataBank DataBank\n  function DisplayData(display, resourceMapper, dataBank)\n    local self = {\n      display = display,\n      resourceMapper = resourceMapper,\n      dataBank = dataBank\n    }\n    \n    function self.Update()\n      local displayData = {}\n\n      local keys = self.dataBank.getKeyList()\n      for k, v in pairs(keys) do\n        if(string.match(v, \"Industry.\")) then\n          local data = self.dataBank.getStringValue(v)\n          displayData[#displayData + 1] = data\n        end\n      end\n\n      local displayJson = json.encode(displayData)\n      display.setScriptInput(displayJson)\n    end\n\n    return self\n  end\nend\n\n--== end file .\\DisplayData.lua ==--\n\n--== start file ..\\Industry\\IndustryData.lua ==--\n\n--==require \"../Data/DataGrid.lua\"\n--==require \"../Data/DataRow.lua\"\n--==require \"../Data/DataCell.lua\"\n\nif not IndustryData then\n  IndustryData = {}\n  IndustryData.__index = IndustryData\n\n  function IndustryData()\n    local self = {\n      name = \"\",\n      status = \"\",\n      product = \"\",\n      notification = \"\"\n    }\n    \n    return self\n  end\n\n  function IndustryDataToDataGrid(data)\n    dataGrid = DataGrid()\n    for kRow, vRow in pairs(data) do\n      local row = DataRow()\n      row.AddCell(UiCell(vRow.name, vRow.notificaiton))\n      row.AddCell(UiCell(vRow.status, vRow.notificaiton))\n      row.AddCell(UiCell(vRow.product, vRow.notification))\n      dataGrid.AddRow(row)\n    end\n    return dataGrid\n  end\nend\n\n--== end file ..\\Industry\\IndustryData.lua ==--\n\n--== start file ..\\Data\\DataRow.lua ==--\n\n--==require \"./DataCell.lua\"\njson = require(\"dkjson\")\n\nif not DataRow then\n  DataRow = {}\n  DataRow.__index = DataRow\n\n  function DataRow(cells)\n    local self = {\n      [\"data\"] = {\n        cells = cells or {}\n      }\n    }\n\n    function self.AddCell(cell) \n      self.cells[#self.data.cells + 1] = cell\n    end\n\n    function self.NumCells()\n      return #self.data.cells\n    end\n\n    function self.GetCells()\n      return self.data.cells\n    end\n\n    function self.FromData(row)\n      for kRow, kValue in pairs(row) do\n        self.data.cells[#self.data.cells + 1] = UiCell(kValue.text, kValue.status)\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataRow.lua ==--\n\n--== start file ..\\Data\\DataGrid.lua ==--\n\n--==require \"./DataRow.lua\"\n--==require \"./DataCell.lua\"\n\nif not DataGrid then\n  DataGrid = {}\n  DataGrid.__index = DataGrid\n\n  function DataGrid(rows)\n    self = {\n      [\"data\"] = {\n        rows = rows or {}\n      }\n    }\n\n    function self.AddRow(row)\n      self.data.rows[#self.data.rows + 1] = row\n    end\n\n    function self.NumColumns()\n      if(#self.rows > 0) then\n        return self.data.rows[0].NumCells()\n      end\n\n      return 0\n    end\n\n    function self.Encode()\n      return self.data.rows.Encode()\n    end\n\n    function self.FromRowData(rows) \n      for kRow, vRow in rows do\n        local row = DataRow()\n        row.FromData(vRow)\n        self.data.rows[#self.data.rows + 1] = row\n      end\n    end\n\n    function self.Decode(json)\n      obj = json.decode(json)\n      for kRow, vRow in pairs(obj) do\n        local row = DataRow()\n        row.FromData(vRow)\n        self.data.rows[#self.data.rows + 1] = row\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataGrid.lua ==--\n\n\n--== start file .\\unit.onStart__.0.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"./DisplayData.lua\"\n--==require \"../Utils/PureResources.lua\"\n\n--sDataBank.clear()\nunit.setTimer(\"Update\", 10)\n\nresourceMapper = PureResources()\ndisplayData = DisplayData(\n    sDisplay,\n    resourceMapper,\n    sDataBank\n  )\n\ndisplayData.Update()\n\n--sLight.setColor(1.0, 0.0, 0.0)\n--sLight.setOnBlinkingDuration(1)\n--sLight.setOffBlinkingDuration(1)\n--sLight.setBlinkingTimeShift(2)\n--sLight.setBlinkingState(true)\n\n--== end file .\\unit.onStart__.0.lua ==--\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"--== start file .\\unit.onTimer_tag_.2.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\unit.onTimer_tag_.2.lua ==--","filter":{"args":[{"value":"UpdateDisplay"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"\ndisplayData.Update()","filter":{"args":[{"value":"Update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}
