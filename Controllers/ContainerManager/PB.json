{"slots":{"0":{"name":"sTransferUnit1","type":{"events":[],"methods":[]}},"1":{"name":"sTemporaryContainer1","type":{"events":[],"methods":[]}},"2":{"name":"sDataBank","type":{"events":[],"methods":[]}},"3":{"name":"sMainProductContainer1","type":{"events":[],"methods":[]}},"4":{"name":"sDisplay1","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\n--== start file ..\\..\\Industry\\IndustryState.lua ==--\n\n--- Mapping from industry state number to text description\n-- @module IndustryState\n\nif not IndustryState then\n\n  --- The table mapping status number to text description\n  -- @field IndustryState\n\n  IndustryState = {\n   [1] = \"Stopped\",\n   [2] = \"Running\",\n   [3] = \"Missing Ingredient\",\n   [4] = \"Ouptut Full\",\n   [5] = \"No Output Container\",\n   [6] = \"Pending\",\n   [7] = \"Missing Schematic\" \n  }\nend\n\n--== end file ..\\..\\Industry\\IndustryState.lua ==--\n\n--== start file .\\DisplayData.lua ==--\n\n--- Contains the data used to transfer between PB and display screen\n-- @classmod ContainerManager.DisplayData\n\nlocal json = require(\"dkjson\")\n\nif not DisplayData then\n  DisplayData = {}\n  DisplayData.__index = DisplayData\n\n  --- Creates a new DisplayData object\n  ---@param transferUnit Industry The transfer unit reference\n  ---@param containers Container The containers being monitored\n  ---@param display Display The display unit to send data to via setScriptInput()\n  function DisplayData(transferUnit, containers, display)\n    local self = {\n      transferUnit = transferUnit,\n      display = display,\n      containers = containers\n    }\n\n    --- Updates the DisplayData based on current state of Transfer unit and Containers\n    function self.Update()\n      local data = {\n        \"Transfering\"\n      }\n\n      local output = self.transferUnit.getOutputs()\n      if(output) then\n        data[#data + 1] = system.getItem(output[1].id).displayName\n      else\n        data[#data + 1] = \"None\"\n      end\n\n      local displayData = {\n        data\n      }\n            \n      for k, v in pairs(self.containers) do\n        displayData[#displayData + 1] = {v.GetContainerName(), v.GetDataBankKey()}\n      end\n      self.display.setScriptInput(json.encode(displayData))\n    end\n    \n    return self\n  end\n\nend\n\n--== end file .\\DisplayData.lua ==--\n\n--== start file ..\\..\\Industry\\TransferManager.lua ==--\n\n--- Transfer items automatically from an input container to an output container\n-- It checks an input container for contents and attempts to set the transfer unit\n-- to transfer to the output container it is linked to.\n-- @classmod TransferManager\n\njson = require \"dkjson\"\n--==require \"../Utils/DUDebug.lua\"\n--==require \"../Industry/IndustryState.lua\"\n\nif not TransferManager then\n  TransferManager = {}\n  TransferManager.__index = TransferManager\n\n  --- Return a new TransferManager object\n  ---@param transferUnit DU::Industry The transfer unit DU Industry object\n  ---@param inputContainer DU::Container The input container to transfer contents from\n  function TransferManager(transferUnit, inputContainer)\n    local self = {\n      transferUnit = transferUnit,\n      inputContainer = inputContainer,\n      contents = inputContainer.getContent() or {},\n      currentIndex = 1,\n      currentTransfer = \"\"\n    }\n\n    --- Get the current items being transfered\n    -- @return string The current item being transfered\n    function self.GetCurrentTransfer() \n      return self.currentTransfer\n    end\n\n    --- Updates the states and changes transfer item as needed\n    function self.Update()\n      if(self.contents == nil or #self.contents \u003c 1) then\n        DebugPrint(\"Input contents empty\")\n        self.currentIndex = 1\n        self.transferUnit.stop(true, true)\n        self.contents = self.inputContainer.getContent()\n        return\n      end\n            \n      if(#self.contents \u003c self.currentIndex) then\n        DebugPrint(\"Resetting index and getting new contents\")\n        self.contents = self.inputContainer.getContent()\n        self.currentIndex = 1\n      end\n\n      if(IndustryState[self.transferUnit.getState()] ~= \"Running\") then\n        self.transferUnit.stop(true, true)\n        DebugPrint(\"Index: \" .. self.currentIndex)\n        DebugPrint(\"Transfering: \" .. json.encode(self.contents[self.currentIndex]))\n        DebugPrint(\"Transfering: \" .. system.getItem(self.contents[self.currentIndex].id).displayName)\n        self.currentTransfer = system.getItem(self.contents[self.currentIndex].id).displayName\n        self.transferUnit.setOutput(self.contents[self.currentIndex].id)\n        self.transferUnit.startFor(1)\n        self.currentIndex = self.currentIndex + 1\n        return\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\..\\Industry\\TransferManager.lua ==--\n\n--== start file ..\\..\\Container\\ContainerMonitor.lua ==--\n\n--- Monitor a containers contents and update a DataBank key with json string\n-- @classmod ContainerMonitor\n\nrequire \"dkjson\"\n\nif not ContainerMonitor then\n  ContainerMonitor = {}\n  ContainerMonitor.__index = ContainerMonitor\n\n  --- Constructs a new ContainerMonitor for a given set of container and DataBank information\n  ---@param containerName string The custom name of the container, corresponds to prefix of the key\n  ---@param container DU::Container Container reference from slot in PB\n  ---@param dataBank DU::DataBank Reference to DU::DataBank to a slot in PB\n  function ContainerMonitor(containerName, container, dataBank) \n    local self = {\n      container = container,\n      dataBank = dataBank,\n      containerName = containerName,\n      dataBankKey = (containerName .. \".Data\")\n    }\n\n\n    --- Update the container contents to DataBank\n    -- @return none\n    function self.Update()\n      self.container.updateContent()\n      local contents = self.container.getContent()\n      if(contents) then\n        self.dataBank.setStringValue(self.dataBankKey, json.encode(contents))\n      end\n    end\n\n    --- Return the DU::Container object\n    -- @return DU::Container object\n    function self.GetContainer()\n      return self.container\n    end\n            \n    --- Return the container name\n    -- @return string The container short name\n    function self.GetContainerName()\n      return self.containerName\n    end\n\n    --- Return the contents of the container\n    -- @return string Json string representing the contents of the container\n    function self.GetContent()\n      if(self.dataBank.hasKey(self.dataBankKey)) then\n        return self.dataBank.getStringValue(self.dataBankKey)\n      end\n      return {}\n    end\n        \n    --- Return the key used to access the container information from DataBank\n    -- @return string The database key can be used to retrieve by DU::DataBank.getStringValue()\n    function self.GetDataBankKey()\n      return self.dataBankKey     \n    end\n\n    return self\n  end\n\nend\n\n--== end file ..\\..\\Container\\ContainerMonitor.lua ==--\n\n--== start file ..\\..\\Utils\\DUDebug.lua ==--\n\n--- DUDebug\n-- Provides functions usefull for debugging\n-- @module DUDebug\n\nif not DUDebug then\n  DUDebug = {}\n  DUDebug.__index = DUDebug\n    \n  gDebugPrint = true --export: Enable or Display Debug Printing\n\n  --- DebugPrint\n  -- Used to print to lua channel, bool on whether to print or not is\n  -- exported to be available in the advanced menu of the PB\n  ---@param message string the message to display\n  -- @return none\n  function DebugPrint(message)\n    if(gDebugPrint) then\n      system.print(message)\n    end\n  end\nend\n\n--== end file ..\\..\\Utils\\DUDebug.lua ==--\n\n\n--== start file .\\unit.onStart__.0.lua ==--\n\n--- The main portion of code that creates the transfer units and container monitor lists.\n-- timers will update the data periodically and modify what is being transfered.\n-- @module ContainerManager.unit.OnStart\n\n--==require \"../../Industry/TransferManager.lua\"\n--==require \"../../Container/ContainerMonitor.lua\"\n--==require \"./DisplayData.lua\"\n\ntransferManagers = {}\ntransferManagers[\"MainProductContainer1\"] = TransferManager(\n                                              sTransferUnit1,\n                                              sTemporaryContainer1\n                                            )\n\n\ncontainerMonitors = {}\n\ncontainerMonitors[\"MainProductContainer1\"] = ContainerMonitor(\n                                               \"MainProductContainer1\", \n                                               sMainProductContainer1, \n                                               sDataBank\n                                             )\n\ncontainerMonitors[\"TemporaryContainer1\"] = ContainerMonitor(\n                                             \"TemporaryContainer1\",\n                                             sTemporaryContainer1,\n                                             sDataBank\n                                           )\n\n\nfor k, v in pairs(containerMonitors) do\n  DebugPrint(k .. \" Updating container data\")\n  v.Update()\n  --DebugPrint(v.GetDataBankKey() .. \": \" .. json.encode(v.GetContent()))\nend\n\nfor k, v in pairs(transferManagers) do\n  --DebugPrint(k .. \"Updating transfer data\")\n  v.Update()\nend\n\ndisplayData = DisplayData(\n  sTransferUnit1, \n  containerMonitors, \n  sDisplay1)\n  \ndisplayData.Update()\n\nunit.setTimer(\"CheckTransfer\", 5)\nunit.setTimer(\"UpdateContainer\", 35)\nunit.setTimer(\"UpdateDisplay\", 7)\n\n--== end file .\\unit.onStart__.0.lua ==--\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"--== start file .\\unit.onTimer_tag_.1.lua ==--\n\nfor k, v in pairs(transferManagers) do\n  DebugPrint(k .. \": Updating transfer data\")\n  v.Update()\nend\n\n--== end file .\\unit.onTimer_tag_.1.lua ==--","filter":{"args":[{"value":"CheckTransfer"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"--== start file .\\unit.onTimer_tag_.2.lua ==--\n\n--==require \"../../Utils/DUDebug.lua\"\n\nfor k, v in pairs(containerMonitors) do\n  DebugPrint(k .. \" Updating container data\")\n  v.Update()\n  --DebugPrint(v.GetDataBankKey() .. \": \" .. json.encode(v.GetContent()))\nend\n\n--== end file .\\unit.onTimer_tag_.2.lua ==--","filter":{"args":[{"value":"UpdateContainer"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"--== start file .\\unit.onTimer_tag_.3.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\unit.onTimer_tag_.3.lua ==--","filter":{"args":[{"value":"UpdateDisplay"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"}],"methods":[],"events":[]}
