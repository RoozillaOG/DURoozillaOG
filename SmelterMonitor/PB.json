{"slots":{"0":{"name":"sSmelter","type":{"events":[],"methods":[]}},"1":{"name":"sOutputContainer","type":{"events":[],"methods":[]}},"2":{"name":"sCoreUnit","type":{"events":[],"methods":[]}},"3":{"name":"sDataBank","type":{"events":[],"methods":[]}},"4":{"name":"sSwitch","type":{"events":[],"methods":[]}},"5":{"name":"sBasicElectronics1","type":{"events":[],"methods":[]}},"6":{"name":"sBasicMetalWorks1","type":{"events":[],"methods":[]}},"7":{"name":"sBasicMetalWorks2","type":{"events":[],"methods":[]}},"8":{"name":"sBasic3DPrinter1","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\n--== start file ..\\Data\\DataCell.lua ==--\n\nif not DataCell then\n  DataCell = {}\n  DataCell.__index = DataCell\n\n  DataCellStatusNormal = 1\n  DataCellStatusWarning = 2\n  DataCellStatusAlert = 3\n  DataCellStatusGood = 4\n\n  --@param status string one of Normal, Warning, Alert\n  function DataCell(text, notification)\n    local self = {\n      [\"data\"] = {\n        text = text or \"\",\n        notification = notification or DataCellStatusNormal\n      }\n    }\n\n    function self.GetText()\n      return self.data.text\n    end\n\n    function self.GetStatus()\n      return self.data.status\n    end\n        \n    function self.GetNotification()\n      return self.data.notification\n    end\n\n    function self.GetData()\n      return self.data\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataCell.lua ==--\n\n--== start file ..\\Industry\\IndustryStocker.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n\nif not IndustryStocker then\n  IndustryStocker = {}\n  IndustryStocker.__index = IndustryStocker\n\n  function IndustryStocker(name, resourceMapper, industryUnit, outputContents, items)\n    local self = {\n      name = name,\n      industryUnit = industryUnit,\n      itemNameAndRequestedQuantity = items,\n      outputContents = outputContents,\n      resourceMapper = resourceMapper\n    }\n        \n    function self.Update()\n      if(IndustryState[self.industryUnit.getState()] ~= \"Running\") then\n        local current = nil\n        if(self.industryUnit.getOutputs()[1]) then\n          current = self.resourceMapper.GetDisplayName(self.industryUnit.getOutputs()[1].id)\n        end\n        self.industryUnit.stop(true, true)\n        for itemName, itemQuantity in pairs(self.itemNameAndRequestedQuantity) do\n          local quantity = outputContents.GetQuantityForName(itemName)\n          local requested = self.itemNameAndRequestedQuantity[itemName]\n          DebugPrint(self.name .. \": quantity(\" .. quantity .. \") < requested(\" .. requested .. \")\" .. \" \" .. itemName .. \" ~= \" .. current)\n          if(quantity < requested and current ~= itemName) then\n            DebugPrint(self.name .. \": Setting product to: \" .. itemName)\n            self.industryUnit.setOutput(self.resourceMapper.GetId(itemName))\n            self.industryUnit.startFor(1)\n          end\n        end\n      end\n    end\n\n    return self\n  end\nend\n\n\n\n\n\n--== end file ..\\Industry\\IndustryStocker.lua ==--\n\n--== start file ..\\Industry\\IndustryState.lua ==--\n\nif not IndustryState then\n  IndustryState = {\n   [1] = \"Stopped\",\n   [2] = \"Running\",\n   [3] = \"Missing Ingredient\",\n   [4] = \"Ouptut Full\",\n   [5] = \"No Output Container\",\n   [6] = \"Pending\",\n   [7] = \"Missing Schematic\" \n  }\nend\n\n--== end file ..\\Industry\\IndustryState.lua ==--\n\n--== start file ..\\Data\\DataRow.lua ==--\n\n--==require \"./DataCell.lua\"\njson = require(\"dkjson\")\n\nif not DataRow then\n  DataRow = {}\n  DataRow.__index = DataRow\n\n  function DataRow(cells)\n    local self = {\n      [\"data\"] = {\n        cells = cells or {}\n      }\n    }\n\n    function self.AddCell(cell) \n      self.data.cells[#self.data.cells + 1] = cell\n    end\n\n    function self.NumCells()\n      return #self.data.cells\n    end\n\n    function self.GetCells()\n      return self.data.cells\n    end\n\n    function self.FromData(row)\n      for kRow, kValue in pairs(row) do\n        self.data.cells[#self.data.cells + 1] = UiCell(kValue.text, kValue.status)\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataRow.lua ==--\n\n--== start file ..\\Element\\Products.lua ==--\n\nif not Products then\n  Products = {}\n  Products.__index = Products\n\n  function Products()\n    local self = {\n      idToDisplayName = {\n        [1942154251] = { id = 1942154251, displayNameWithSize = \"Advanced Glass product\" },\n         [2301749833] = { id = 2301749833, displayNameWithSize = \"Ag-Li Reinforced Glass product\" },\n         [18262914] = { id = 18262914, displayNameWithSize = \"Al-Fe Alloy product\" },\n         [2021406770] = { id = 2021406770, displayNameWithSize = \"Al-Li Alloy product\" },\n         [2646210914] = { id = 2646210914, displayNameWithSize = \"Biological matter product\" },\n         [2679709617] = { id = 2679709617, displayNameWithSize = \"Brick product\" },\n         [1034957327] = { id = 1034957327, displayNameWithSize = \"Calcium Reinforced Copper product\" },\n         [1622880428] = { id = 1622880428, displayNameWithSize = \"Carbon Fiber product\" },\n         [645870905] = { id = 645870905, displayNameWithSize = \"Concrete product\" },\n         [1673011820] = { id = 1673011820, displayNameWithSize = \"Cu-Ag Alloy product\" },\n         [994232382] = { id = 994232382, displayNameWithSize = \"Deprecated Titanium 21 product\" },\n         [1531847536] = { id = 1531847536, displayNameWithSize = \"Deprecated polycarbonate plastic product\" },\n         [2023317260] = { id = 2023317260, displayNameWithSize = \"Deprecated zircaloy product\" },\n         [231758472] = { id = 231758472, displayNameWithSize = \"Duralumin product\" },\n         [918590356] = { id = 918590356, displayNameWithSize = \"Fluoropolymer product\" },\n         [3308209457] = { id = 3308209457, displayNameWithSize = \"Glass product\" },\n         [606249095] = { id = 606249095, displayNameWithSize = \"Gold-Coated Glass product\" },\n         [3292291904] = { id = 3292291904, displayNameWithSize = \"Grade 5 Titanium Alloy product\" },\n         [167908167] = { id = 167908167, displayNameWithSize = \"Inconel product\" },\n         [2790683457] = { id = 2790683457, displayNameWithSize = \"Lithium Cobaltate product\" },\n         [3790459776] = { id = 3790459776, displayNameWithSize = \"Lithium niobate product\" },\n         [3987872305] = { id = 3987872305, displayNameWithSize = \"Mangalloy product\" },\n         [4150961531] = { id = 4150961531, displayNameWithSize = \"Manganese Reinforced Glass product\" },\n         [3518490274] = { id = 3518490274, displayNameWithSize = \"Maraging Steel product\" },\n         [331532952] = { id = 331532952, displayNameWithSize = \"Marble product\" },\n         [4103265826] = { id = 4103265826, displayNameWithSize = \"Polycalcite plastic product\" },\n         [2014531313] = { id = 2014531313, displayNameWithSize = \"Polycarbonate plastic product\" },\n         [2097691217] = { id = 2097691217, displayNameWithSize = \"Polysulfide plastic product\" },\n         [2550840787] = { id = 2550840787, displayNameWithSize = \"Red Gold Product\" },\n         [2929462635] = { id = 2929462635, displayNameWithSize = \"Sc-Al Alloy Product\" },\n         [2565702107] = { id = 2565702107, displayNameWithSize = \"Silumin Product\" },\n         [2984358477] = { id = 2984358477, displayNameWithSize = \"Stainless Steel product\" },\n         [511774178] = { id = 511774178, displayNameWithSize = \"Steel product\" },\n         [2348042377] = { id = 2348042377, displayNameWithSize = \"Sulfur Acid product\" },\n         [1734893264] = { id = 1734893264, displayNameWithSize = \"Ti-Nb Supraconductor product\" },\n         [2479827059] = { id = 2479827059, displayNameWithSize = \"Tier 1 Product Honeycomb Schematic Copy\" },\n         [690638651] = { id = 690638651, displayNameWithSize = \"Tier 1 Product Material Schematic Copy\" },\n         [632722426] = { id = 632722426, displayNameWithSize = \"Tier 2 Product Honeycomb Schematic Copy\" },\n         [4073976374] = { id = 4073976374, displayNameWithSize = \"Tier 2 Product Material Schematic Copy\" },\n         [2343247971] = { id = 2343247971, displayNameWithSize = \"Tier 3 Product Honeycomb Schematic Copy\" },\n         [3707339625] = { id = 3707339625, displayNameWithSize = \"Tier 3 Product Material Schematic Copy\" },\n         [3743434922] = { id = 3743434922, displayNameWithSize = \"Tier 4 Product Honeycomb Schematic Copy\" },\n         [2485530515] = { id = 2485530515, displayNameWithSize = \"Tier 4 Product Material Schematic Copy\" },\n         [1885016266] = { id = 1885016266, displayNameWithSize = \"Tier 5 Product Honeycomb Schematic Copy\" },\n         [2752973532] = { id = 2752973532, displayNameWithSize = \"Tier 5 Product Material Schematic Copy\" },\n         [255776324] = { id = 255776324, displayNameWithSize = \"Vanamer product\" },\n         [770773323] = { id = 770773323, displayNameWithSize = \"Wood product\" },\n\n      },\n      displayNameToId = {\n        [\"Advanced Glass product\"] = { id = 1942154251, displayNameWithSize = \"Advanced Glass product\" },\n         [\"Ag-Li Reinforced Glass product\"] = { id = 2301749833, displayNameWithSize = \"Ag-Li Reinforced Glass product\" },\n         [\"Al-Fe Alloy product\"] = { id = 18262914, displayNameWithSize = \"Al-Fe Alloy product\" },\n         [\"Al-Li Alloy product\"] = { id = 2021406770, displayNameWithSize = \"Al-Li Alloy product\" },\n         [\"Biological matter product\"] = { id = 2646210914, displayNameWithSize = \"Biological matter product\" },\n         [\"Brick product\"] = { id = 2679709617, displayNameWithSize = \"Brick product\" },\n         [\"Calcium Reinforced Copper product\"] = { id = 1034957327, displayNameWithSize = \"Calcium Reinforced Copper product\" },\n         [\"Carbon Fiber product\"] = { id = 1622880428, displayNameWithSize = \"Carbon Fiber product\" },\n         [\"Concrete product\"] = { id = 645870905, displayNameWithSize = \"Concrete product\" },\n         [\"Cu-Ag Alloy product\"] = { id = 1673011820, displayNameWithSize = \"Cu-Ag Alloy product\" },\n         [\"Deprecated Titanium 21 product\"] = { id = 994232382, displayNameWithSize = \"Deprecated Titanium 21 product\" },\n         [\"Deprecated polycarbonate plastic product\"] = { id = 1531847536, displayNameWithSize = \"Deprecated polycarbonate plastic product\" },\n         [\"Deprecated zircaloy product\"] = { id = 2023317260, displayNameWithSize = \"Deprecated zircaloy product\" },\n         [\"Duralumin product\"] = { id = 231758472, displayNameWithSize = \"Duralumin product\" },\n         [\"Fluoropolymer product\"] = { id = 918590356, displayNameWithSize = \"Fluoropolymer product\" },\n         [\"Glass product\"] = { id = 3308209457, displayNameWithSize = \"Glass product\" },\n         [\"Gold-Coated Glass product\"] = { id = 606249095, displayNameWithSize = \"Gold-Coated Glass product\" },\n         [\"Grade 5 Titanium Alloy product\"] = { id = 3292291904, displayNameWithSize = \"Grade 5 Titanium Alloy product\" },\n         [\"Inconel product\"] = { id = 167908167, displayNameWithSize = \"Inconel product\" },\n         [\"Lithium Cobaltate product\"] = { id = 2790683457, displayNameWithSize = \"Lithium Cobaltate product\" },\n         [\"Lithium niobate product\"] = { id = 3790459776, displayNameWithSize = \"Lithium niobate product\" },\n         [\"Mangalloy product\"] = { id = 3987872305, displayNameWithSize = \"Mangalloy product\" },\n         [\"Manganese Reinforced Glass product\"] = { id = 4150961531, displayNameWithSize = \"Manganese Reinforced Glass product\" },\n         [\"Maraging Steel product\"] = { id = 3518490274, displayNameWithSize = \"Maraging Steel product\" },\n         [\"Marble product\"] = { id = 331532952, displayNameWithSize = \"Marble product\" },\n         [\"Polycalcite plastic product\"] = { id = 4103265826, displayNameWithSize = \"Polycalcite plastic product\" },\n         [\"Polycarbonate plastic product\"] = { id = 2014531313, displayNameWithSize = \"Polycarbonate plastic product\" },\n         [\"Polysulfide plastic product\"] = { id = 2097691217, displayNameWithSize = \"Polysulfide plastic product\" },\n         [\"Red Gold Product\"] = { id = 2550840787, displayNameWithSize = \"Red Gold Product\" },\n         [\"Sc-Al Alloy Product\"] = { id = 2929462635, displayNameWithSize = \"Sc-Al Alloy Product\" },\n         [\"Silumin Product\"] = { id = 2565702107, displayNameWithSize = \"Silumin Product\" },\n         [\"Stainless Steel product\"] = { id = 2984358477, displayNameWithSize = \"Stainless Steel product\" },\n         [\"Steel product\"] = { id = 511774178, displayNameWithSize = \"Steel product\" },\n         [\"Sulfur Acid product\"] = { id = 2348042377, displayNameWithSize = \"Sulfur Acid product\" },\n         [\"Ti-Nb Supraconductor product\"] = { id = 1734893264, displayNameWithSize = \"Ti-Nb Supraconductor product\" },\n         [\"Tier 1 Product Honeycomb Schematic Copy\"] = { id = 2479827059, displayNameWithSize = \"Tier 1 Product Honeycomb Schematic Copy\" },\n         [\"Tier 1 Product Material Schematic Copy\"] = { id = 690638651, displayNameWithSize = \"Tier 1 Product Material Schematic Copy\" },\n         [\"Tier 2 Product Honeycomb Schematic Copy\"] = { id = 632722426, displayNameWithSize = \"Tier 2 Product Honeycomb Schematic Copy\" },\n         [\"Tier 2 Product Material Schematic Copy\"] = { id = 4073976374, displayNameWithSize = \"Tier 2 Product Material Schematic Copy\" },\n         [\"Tier 3 Product Honeycomb Schematic Copy\"] = { id = 2343247971, displayNameWithSize = \"Tier 3 Product Honeycomb Schematic Copy\" },\n         [\"Tier 3 Product Material Schematic Copy\"] = { id = 3707339625, displayNameWithSize = \"Tier 3 Product Material Schematic Copy\" },\n         [\"Tier 4 Product Honeycomb Schematic Copy\"] = { id = 3743434922, displayNameWithSize = \"Tier 4 Product Honeycomb Schematic Copy\" },\n         [\"Tier 4 Product Material Schematic Copy\"] = { id = 2485530515, displayNameWithSize = \"Tier 4 Product Material Schematic Copy\" },\n         [\"Tier 5 Product Honeycomb Schematic Copy\"] = { id = 1885016266, displayNameWithSize = \"Tier 5 Product Honeycomb Schematic Copy\" },\n         [\"Tier 5 Product Material Schematic Copy\"] = { id = 2752973532, displayNameWithSize = \"Tier 5 Product Material Schematic Copy\" },\n         [\"Vanamer product\"] = { id = 255776324, displayNameWithSize = \"Vanamer product\" },\n         [\"Wood product\"] = { id = 770773323, displayNameWithSize = \"Wood product\" },\n\n      }\n    }\n\n    function self.GetId(displayName)\n      if(self.displayNameToId[displayName]) then\n        return self.displayNameToId[displayName].id\n      end\n      return -1\n    end\n\n    function self.GetDisplayName(id)\n      if(self.idToDisplayName[id]) then\n        return self.idToDisplayName[id].displayNameWithSize\n      end\n\n      local item = system.getItem(id)\n      if(item and item.displayNameWithSize) then\n        return item.displayNameWithSize\n      end\n      \n      return \"\"\n    end\n    return self\n  end\nend\n\n--== end file ..\\Element\\Products.lua ==--\n\n--== start file ..\\Container\\ContainerContents.lua ==--\n\nif not ContainerContents then\n  ContainerContents = {}\n  ContainerContents.__index = ContainerContents\n\n  function ContainerContents(resourceMapper, containers)\n    self = {\n        contents = {},\n        resourceMapper = resourceMapper,\n        containers = containers\n    }\n\n    function self.Update()\n      self.contents = {}\n      for containerIndex, containerValue in pairs(containers) do\n        containerValue.updateContent()\n        for itemKey, itemValue in pairs(containerValue.getContent()) do\n          local itemName = self.resourceMapper.GetDisplayName(itemValue.id)\n          if(self.contents[itemName]) then\n            self.contents[itemName][\"quantity\"] = self.contents[itemName].quantity + itemValue.quantity    \n          else\n            self.contents[itemName] = {\n              displayName = itemName,\n              id = itemValue.id, \n              quantity = itemValue.quantity\n            }\n          end\n        end\n      end\n    end\n\n    function self.GetQuantityForId(id)\n      local name = self.resourceMapper.GetDisplayName(id)\n      if(name and self.contents[name]) then\n        return self.contents[name].quantity\n      end\n      return 0\n    end\n\n    function self.GetQuantityForName(name)\n      if(name and self.contents[name]) then\n        return self.contents[name].quantity\n      end\n      return 0\n    end\n\n    function self.GetContents()\n      return self.contents\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Container\\ContainerContents.lua ==--\n\n--== start file ..\\Data\\DataGrid.lua ==--\n\n--==require \"./DataRow.lua\"\n--==require \"./DataCell.lua\"\n\nif not DataGrid then\n  DataGrid = {}\n  DataGrid.__index = DataGrid\n\n  function DataGrid(rows)\n    self = {\n      [\"data\"] = {\n        rows = rows or {}\n      }\n    }\n\n    function self.AddRow(row)\n      self.data.rows[#self.data.rows + 1] = row\n    end\n\n    function self.NumColumns()\n      if(#self.data.rows > 0) then\n        return self.data.rows[1].NumCells()\n      end\n\n      return 0\n    end\n        \n    function self.NumRows()\n      if(#self.data.rows > 0) then\n        return #self.data.rows\n      end\n      return 0\n    end\n\n    function self.Encode()\n      return self.data.rows.Encode()\n    end\n        \n    function self.GetRows()\n      return self.data.rows\n    end\n\n    function self.FromRowData(rows) \n      for kRow, vRow in rows do\n        local row = DataRow()\n        row.FromData(vRow)\n        self.data.rows[#self.data.rows + 1] = row\n      end\n    end\n\n    function self.Decode(json)\n      obj = json.decode(json)\n      for kRow, vRow in pairs(obj) do\n        local row = DataRow()\n        row.FromData(vRow)\n        self.data.rows[#self.data.rows + 1] = row\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataGrid.lua ==--\n\n--== start file ..\\Utils\\DUDebug.lua ==--\n\nif not DUDebug then\n  DUDebug = {}\n  DUDebug.__index = DUDebug\n    \n  gDebugPrint = false --export: Enable or Display Debug Printing\n\n  function DebugPrint(message)\n    if(gDebugPrint) then\n      system.print(message)\n    end\n  end\nend\n\n--== end file ..\\Utils\\DUDebug.lua ==--\n\n--== start file ..\\Industry\\IndustryMonitor.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n--==require \"../Data/DataCell.lua\"\n--==require \"./IndustryData.lua\"\n--==require \"./IndustryState.lua\"\n\nif not IndustryMonitor then\n  IndustryMonitor = {}\n  IndustryMonitor.__index = IndustryMonitor\n\n  function IndustryMonitor(name, industryUnit, dataBank)\n    local self = {\n      name = name,\n      industryUnit = industryUnit,\n      dataBank = dataBank\n    }\n        \n    function self.Update()\n      system.print(\"Metalworks: Update()\")\n      if(self.dataBank) then\n        local data = IndustryData()\n\n        local info = self.industryUnit.getInfo()\n        DebugPrint(self.name .. \": info: \" .. json.encode(info))\n\n        data.name = self.name\n        DebugPrint(\"state: \" .. json.encode(self.industryUnit.getState()))\n        data.status = self.industryUnit.getState()\n        local statusString = IndustryState[data.status]\n        if(statusString == \"Running\") then\n          data.notification = DataCellStatusGood\n        elseif(statusString == \"Stopped\") then\n          data.notification = DataCellStatusNormal\n        else\n          data.notification = DataCellStatusAlert\n        end\n\n        local outputs = self.industryUnit.getOutputs()\n        if(#outputs > 0) then\n          DebugPrint(\"Output: \" .. json.encode(system.getItem(outputs[1].id).displayName))\n          data.product = system.getItem(outputs[1].id).displayName\n        else\n          data.product = \"None\"\n        end\n        local jsonRow = json.encode(data)\n        DebugPrint(self.name .. \".info = \" .. jsonRow)\n        self.dataBank.setStringValue((\"Industry\" .. self.name .. \".info\"), jsonRow)\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Industry\\IndustryMonitor.lua ==--\n\n--== start file ..\\Industry\\IndustryData.lua ==--\n\n--==require \"../Data/DataGrid.lua\"\n--==require \"../Data/DataRow.lua\"\n--==require \"../Data/DataCell.lua\"\n--==require \"./IndustryState.lua\"\n\nif not IndustryData then\n  IndustryData = {}\n  IndustryData.__index = IndustryData\n\n  function IndustryData()\n    local self = {\n      name = \"\",\n      status = \"\",\n      product = \"\",\n      notification = \"\"\n    }\n    \n    return self\n  end\n\n  function IndustryDataToDataGrid(data)\n    dataGrid = DataGrid()\n    for kRow, vRow in pairs(data) do\n      local row = DataRow()\n      local rowData = json.decode(vRow)\n      row.AddCell(DataCell(rowData.name, rowData.notification))\n      row.AddCell(DataCell(IndustryState[rowData.status], rowData.notification))\n      row.AddCell(DataCell(rowData.product, rowData.notification))\n      dataGrid.AddRow(row)\n    end\n    return dataGrid\n  end\nend\n\n--== end file ..\\Industry\\IndustryData.lua ==--\n\n\n--== start file .\\unit.onStart__.0.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"../Container/ContainerContents.lua\"\n--==require \"../Industry/IndustryState.lua\"\n--==require \"../Element/Products.lua\"\n--==require \"../Industry/IndustryStocker.lua\"\n--==require \"../Industry/IndustryMonitor.lua\"\n\nsOutputContainer.updateContent()\nresourceMapper = Products()\n\noutputContents = ContainerContents(resourceMapper, {sOutputContainer})\noutputContents.Update()\nstockers = {}\n\nstockers[#stockers + 1] = IndustryStocker(\n    \"Smelter\",\n    resourceMapper,\n    sSmelter,\n    outputContents,\n    {\n        [\"Steel product\"] = 1000,\n        [\"Al-Fe Alloy product\"] = 1000, \n        [\"Silumin Product\"] = 1000\n    }\n  )\n\n\nfor k, v in pairs(stockers) do\n  v.Update()\nend\n\nunit.setTimer(\"ContainerUpdate\", 31)\nunit.setTimer(\"IndustryUpdate\", 10)\n\n--== end file .\\unit.onStart__.0.lua ==--\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"--== start file .\\unit.onTimer_tag_.1.lua ==--\n\n-- Container Update --\noutputContents.Update()\n\n--== end file .\\unit.onTimer_tag_.1.lua ==--","filter":{"args":[{"value":"ContainerUpdate"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"--== start file .\\unit.onTimer_tag_.2.lua ==--\n\n-- Industry Update --\nfor k, v in pairs(stockers) do\n  v.Update()\nend\n\n--== end file .\\unit.onTimer_tag_.2.lua ==--","filter":{"args":[{"value":"IndustryUpdate"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}
