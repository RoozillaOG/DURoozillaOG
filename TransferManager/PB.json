{"slots": {"0": {"name": "sTransferUnit1", "type": {"events": [], "methods": []}}, "1": {"name": "sInputContainer1", "type": {"events": [], "methods": []}}, "2": {"name": "slot3", "type": {"events": [], "methods": []}}, "3": {"name": "slot4", "type": {"events": [], "methods": []}}, "4": {"name": "slot5", "type": {"events": [], "methods": []}}, "5": {"name": "slot6", "type": {"events": [], "methods": []}}, "6": {"name": "slot7", "type": {"events": [], "methods": []}}, "7": {"name": "slot8", "type": {"events": [], "methods": []}}, "8": {"name": "slot9", "type": {"events": [], "methods": []}}, "9": {"name": "slot10", "type": {"events": [], "methods": []}}, "-1": {"name": "unit", "type": {"events": [], "methods": []}}, "-3": {"name": "player", "type": {"events": [], "methods": []}}, "-2": {"name": "construct", "type": {"events": [], "methods": []}}, "-4": {"name": "system", "type": {"events": [], "methods": []}}, "-5": {"name": "library", "type": {"events": [], "methods": []}}}, "handlers": [{"code": "--== start file .\\sInputContainer1.onContentUpdate__.0.lua ==--\n\n\n\n--== end file .\\sInputContainer1.onContentUpdate__.0.lua ==--", "filter": {"args": [], "signature": "onContentUpdate()", "slotKey": "1"}, "key": "0"}, {"code": "\n--== start file ..\\Industry\\IndustryState.lua ==--\n\nif not IndustryState then\n  IndustryState = {\n   [1] = \"Stopped\",\n   [2] = \"Running\",\n   [3] = \"Missing Ingredient\",\n   [4] = \"Ouptut Full\",\n   [5] = \"No Output Container\",\n   [6] = \"Pending\",\n   [7] = \"Missing Schematic\" \n  }\nend\n\n--== end file ..\\Industry\\IndustryState.lua ==--\n\n--== start file ..\\Utils\\DUDebug.lua ==--\n\nif not DUDebug then\n  DUDebug = {}\n  DUDebug.__index = DUDebug\n    \n  gDebugPrint = false --export: Enable or Display Debug Printing\n\n  function DebugPrint(message)\n    if(gDebugPrint) then\n      system.print(message)\n    end\n  end\nend\n\n--== end file ..\\Utils\\DUDebug.lua ==--\n\n--== start file ..\\Industry\\TransferManager.lua ==--\n\nrequire \"dkjson\"\n--==require \"../Utils/DUDebug.lua\"\n--==require \"../Industry/IndustryState.lua\"\n\nif not TransferManager then\n  TransferManager = {}\n  TransferManager.__index = TransferManager\n\n  function TransferManager(transferUnit, inputContainer)\n    local self = {\n      transferUnit = transferUnit,\n      inputContainer = inputContainer,\n      contents = inputContainer.getContent() or {},\n      currentIndex = 1,\n      current = \"\"\n    }\n\n    function self.Update()\n      if(self.contents == nil or #self.contents < 1) then\n        DebugPrint(\"Input contents empty\")\n        self.currentIndex = 1\n        self.transferUnit.stop(true, true)\n        self.contents = self.inputContainer.getContent()\n        return\n      end\n      if(#self.contents < self.currentIndex) then\n        DebugPrint(\"Resetting index and getting new contents\")\n        self.contents = self.inputContainer.getContent()\n        self.currentIndex = 1\n      end\n      DebugPrint(\"--------\")\n      DebugPrint(\"Input container contents: \" .. json.encode(self.contents))\n      DebugPrint(\"--------\")\n      if(IndustryState[self.transferUnit.getState()] ~= \"Running\") then\n        local current = nil\n        if(self.transferUnit.getOutputs()[1]) then\n          current = self.transferUnit.getInputs()[1].id\n          DebugPrint(\"Current: \" .. current)\n        end\n        DebugPrint(\"State: \" .. IndustryState[self.transferUnit.getState()])\n        if(current ~= nil and IndustryState[self.transferUnit.getState()] == \"Stopped\") then\n          DebugPrint(\"Continuing to transfer \" .. system.getItem(self.transferUnit.getOutputs()[1].id).displayName)\n          self.transferUnit.setOutput(current)\n          self.transferUnit.startFor(1) \n        else\n          self.transferUnit.stop(true, true)\n          DebugPrint(\"Index: \" .. self.currentIndex)\n          DebugPrint(\"Transfering: \" .. json.encode(self.contents[self.currentIndex]))\n          DebugPrint(\"Transfering: \" .. system.getItem(self.contents[self.currentIndex].id).displayName)\n          self.transferUnit.setOutput(self.contents[self.currentIndex].id)\n          self.transferUnit.startFor(1)\n          self.currentIndex = self.currentIndex + 1\n          return\n        end\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Industry\\TransferManager.lua ==--\n\n\n--== start file .\\unit.onStart__.1.lua ==--\n\n--==require \"../Industry/TransferManager.lua\"\n\ntransfer = TransferManager(\n  sTransferUnit1,\n  sInputContainer1\n)\n\nsInputContainer1.updateContent()\ntransfer.Update()\n\nunit.setTimer(\"CheckTransfer\", 5)\nunit.setTimer(\"UpdateContainer\", 35)\n\n--== end file .\\unit.onStart__.1.lua ==--\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-1"}, "key": "1"}, {"code": "--== start file .\\unit.onTimer_tag_.2.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n\nDebugPrint(\"Transfer update\")\ntransfer.Update()\n\n--== end file .\\unit.onTimer_tag_.2.lua ==--", "filter": {"args": [{"value": "CheckTransfer"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "2"}, {"code": "sInputContainer1.updateContent()", "filter": {"args": [{"value": "UpdateContainer"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "3"}], "methods": [], "events": []}
