{"slots":{"0":{"name":"sTransferUnit1","type":{"events":[],"methods":[]}},"1":{"name":"sTemporaryContainer1","type":{"events":[],"methods":[]}},"2":{"name":"sDataBank","type":{"events":[],"methods":[]}},"3":{"name":"sMainProductContainer1","type":{"events":[],"methods":[]}},"4":{"name":"sDisplay1","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\n--== start file ..\\Utils\\DUDebug.lua ==--\n\nif not DUDebug then\n  DUDebug = {}\n  DUDebug.__index = DUDebug\n    \n  gDebugPrint = true --export: Enable or Display Debug Printing\n\n  function DebugPrint(message)\n    if(gDebugPrint) then\n      system.print(message)\n    end\n  end\nend\n\n--== end file ..\\Utils\\DUDebug.lua ==--\n\n--== start file ..\\Industry\\TransferManager.lua ==--\n\nrequire \"dkjson\"\n--==require \"../Utils/DUDebug.lua\"\n--==require \"../Industry/IndustryState.lua\"\n\nif not TransferManager then\n  TransferManager = {}\n  TransferManager.__index = TransferManager\n\n  function TransferManager(transferUnit, inputContainer)\n    local self = {\n      transferUnit = transferUnit,\n      inputContainer = inputContainer,\n      contents = inputContainer.getContent() or {},\n      currentIndex = 1,\n      currentTransfer = \"\"\n    }\n\n    function self.GetCurrentTransfer() \n      return self.currentTransfer\n    end\n\n    function self.Update()\n      if(self.contents == nil or #self.contents < 1) then\n        DebugPrint(\"Input contents empty\")\n        self.currentIndex = 1\n        self.transferUnit.stop(true, true)\n        self.contents = self.inputContainer.getContent()\n        return\n      end\n      if(#self.contents < self.currentIndex) then\n        DebugPrint(\"Resetting index and getting new contents\")\n        self.contents = self.inputContainer.getContent()\n        self.currentIndex = 1\n      end\n      DebugPrint(\"--------\")\n      --DebugPrint(\"Input container contents: \" .. json.encode(self.contents))\n      DebugPrint(\"--------\")\n      if(IndustryState[self.transferUnit.getState()] ~= \"Running\") then\n        local current = nil\n        if(self.transferUnit.getOutputs()[1]) then\n          current = self.transferUnit.getInputs()[1].id\n          DebugPrint(\"Current: \" .. current)\n        end\n        DebugPrint(\"State: \" .. IndustryState[self.transferUnit.getState()])\n        if(current ~= nil and IndustryState[self.transferUnit.getState()] == \"Stopped\") then\n          DebugPrint(\"Continuing to transfer \" .. system.getItem(self.transferUnit.getOutputs()[1].id).displayName)\n          self.transferUnit.setOutput(current)\n          self.transferUnit.startFor(1) \n        else\n          self.transferUnit.stop(true, true)\n          DebugPrint(\"Index: \" .. self.currentIndex)\n          DebugPrint(\"Transfering: \" .. json.encode(self.contents[self.currentIndex]))\n          DebugPrint(\"Transfering: \" .. system.getItem(self.contents[self.currentIndex].id).displayName)\n          self.currentTransfer = system.getItem(self.contents[self.currentIndex].id).displayName\n          self.transferUnit.setOutput(self.contents[self.currentIndex].id)\n          self.transferUnit.startFor(1)\n          self.currentIndex = self.currentIndex + 1\n          return\n        end\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Industry\\TransferManager.lua ==--\n\n--== start file ..\\Industry\\IndustryState.lua ==--\n\nif not IndustryState then\n  IndustryState = {\n   [1] = \"Stopped\",\n   [2] = \"Running\",\n   [3] = \"Missing Ingredient\",\n   [4] = \"Ouptut Full\",\n   [5] = \"No Output Container\",\n   [6] = \"Pending\",\n   [7] = \"Missing Schematic\" \n  }\nend\n\n--== end file ..\\Industry\\IndustryState.lua ==--\n\n--== start file ..\\Container\\ContainerMonitor.lua ==--\n\nrequire \"dkjson\"\n\nif not ContainerMonitor then\n  ContainerMonitor = {}\n  ContainerMonitor.__index = ContainerMonitor\n\n  function ContainerMonitor(containerName, container, dataBank) \n    local self = {\n      container = container,\n      dataBank = dataBank,\n      containerName = containerName,\n      dataBankKey = (containerName .. \".Data\")\n    }\n\n    function self.Update()\n      self.container.updateContent()\n      local contents = self.container.getContent()\n      if(contents) then\n        self.dataBank.setStringValue(self.dataBankKey, json.encode(contents))\n      end\n    end\n\n    function self.GetContainer()\n      return self.container\n    end\n            \n    function self.GetContainerName()\n      return self.containerName\n    end\n\n    function self.GetContent()\n      if(self.dataBank.hasKey(self.dataBankKey)) then\n        return self.dataBank.getStringValue(self.dataBankKey)\n      end\n      return {}\n    end\n        \n    function self.GetDataBankKey()\n      return self.dataBankKey     \n    end\n\n    return self\n  end\n\nend\n\n--== end file ..\\Container\\ContainerMonitor.lua ==--\n\n--== start file .\\DisplayData.lua ==--\n\nrequire \"dkjson\"\n\nif not DisplayData then\n  DisplayData = {}\n  DisplayData.__index = DisplayData\n\n  function DisplayData(transferUnit, containers, display)\n    local self = {\n      transferUnit = transferUnit,\n      display = display,\n      containers = containers\n    }\n\n    function self.Update()\n      local data = {\n        \"Transfering\"\n      }\n\n      local output = self.transferUnit.getOutputs()\n      if(output) then\n        data[#data + 1] = system.getItem(output[1].id).displayName\n      else\n        data[#data + 1] = \"None\"\n      end\n\n      local displayData = {\n        data\n      }\n            \n      for k, v in pairs(self.containers) do\n        displayData[#displayData + 1] = {v.GetContainerName(), v.GetDataBankKey()}\n      end\n      self.display.setScriptInput(json.encode(displayData))\n    end\n    \n    return self\n  end\n\nend\n\n--== end file .\\DisplayData.lua ==--\n\n\n--== start file .\\unit.onStart__.0.lua ==--\n\n--==require \"../Industry/TransferManager.lua\"\n--==require \"../Container/ContainerMonitor.lua\"\n--==require \"./DisplayData.lua\"\n\ntransferManagers = {}\ntransferManagers[\"MainProductContainer1\"] = TransferManager(\n                                              sTransferUnit1,\n                                              sTemporaryContainer1\n                                            )\n\n\ncontainerMonitors = {}\n\ncontainerMonitors[\"MainProductContainer1\"] = ContainerMonitor(\n                                               \"MainProductContainer1\", \n                                               sMainProductContainer1, \n                                               sDataBank\n                                             )\n\ncontainerMonitors[\"TemporaryContainer1\"] = ContainerMonitor(\n                                             \"TemporaryContainer1\",\n                                             sTemporaryContainer1,\n                                             sDataBank\n                                           )\n\n\nfor k, v in pairs(containerMonitors) do\n  DebugPrint(k .. \" Updating container data\")\n  v.Update()\n  DebugPrint(v.GetDataBankKey() .. \": \" .. json.encode(v.GetContent()))\nend\n\nfor k, v in pairs(transferManagers) do\n  DebugPrint(k .. \"Updating transfer data\")\n  v.Update()\nend\n\ndisplayData = DisplayData(\n  sTransferUnit1, \n  containerMonitors, \n  sDisplay1)\n  \ndisplayData.Update()\n\nunit.setTimer(\"CheckTransfer\", 5)\nunit.setTimer(\"UpdateContainer\", 35)\nunit.setTimer(\"UpdateDisplay\", 7)\n\n--== end file .\\unit.onStart__.0.lua ==--\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"--== start file .\\unit.onTimer_tag_.1.lua ==--\n\nfor k, v in pairs(transferManagers) do\n  DebugPrint(k .. \"Updating transfer data\")\n  v.Update()\nend\n\n--== end file .\\unit.onTimer_tag_.1.lua ==--","filter":{"args":[{"value":"CheckTransfer"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"--== start file .\\unit.onTimer_tag_.2.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n\nfor k, v in pairs(containerMonitors) do\n  DebugPrint(k .. \" Updating container data\")\n  v.Update()\n  DebugPrint(v.GetDataBankKey() .. \": \" .. json.encode(v.GetContent()))\nend\n\n--== end file .\\unit.onTimer_tag_.2.lua ==--","filter":{"args":[{"value":"UpdateContainer"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"--== start file .\\unit.onTimer_tag_.3.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\unit.onTimer_tag_.3.lua ==--","filter":{"args":[{"value":"UpdateDisplay"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"}],"methods":[],"events":[]}
