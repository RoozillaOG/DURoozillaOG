{"slots":{"0":{"name":"Display","type":{"events":[],"methods":[]}},"1":{"name":"Refiner","type":{"events":[],"methods":[]}},"2":{"name":"OutputContainer1","type":{"events":[],"methods":[]}},"3":{"name":"CoreUnit","type":{"events":[],"methods":[]}},"4":{"name":"OutputContainer2","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--== start file .\\Refiner.onStatusChanged_status_.0.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\Refiner.onStatusChanged_status_.0.lua ==--","filter":{"args":[{"value":"status"}],"signature":"onStatusChanged(status)","slotKey":"1"},"key":"0"},{"code":"displayData.Update()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"2"},"key":"1"},{"code":"displayData.Update()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"4"},"key":"2"},{"code":"--== start file ..\\Industry\\IndustryStocker.lua ==--\n\nif not IndustryStocker then\n  IndustryStocker = {}\n  IndustryStocker.__index = IndustryStocker\n\n  function IndustryStocker(refiner, outputContainer, items)\n    local self = {\n      refiner = refiner,\n      itemNameAndRequestedQuantity = items,\n      itemIdToName = {},\n      itemNameToId = {},\n      outputContainer = outputContainer\n    }\n      \n    local contents = ContainerContents({self.outputContainer}).GetContents()\n    for ik, iv in pairs(items) do\n      for ek, ev in pairs(contents) do\n        local name = system.getItem(ev.id).name\n        if(name == ik) then\n          self.itemIdToName[ev.id] = name\n          self.itemNameToId[name] = ev.id\n        end\n      end\n    end\n        \n    --system.print(\"itemIdtoName: \" .. json.encode(self.itemIdToName))\n        \n    function self.Update()\n      local outputContainer = ContainerContents({self.outputContainer})\n      local state = self.refiner.getState()\n      --system.print(\"State = \" .. IndustryState[state])\n            \n      --system.print(\"Refiner Inputs: \" .. json.encode(self.refiner.getInputs()))\n      local inputItem = system.getItem(self.refiner.getInputs()[1][\"id\"])\n            \n      --system.print(\"Refiner Outputs: \" .. json.encode(self.refiner.getOutputs()))\n      local outputItem = system.getItem(self.refiner.getOutputs()[1][\"id\"])\n      \n      if(IndustryState[refiner.getState()] == \"Running\") then\n        system.print(\"Refinery currently running\")\n      else\n        for k, v in pairs(self.itemNameAndRequestedQuantity) do\n                    system.print(\"v = \" .. v)\n          if(k ~= outputItem) then\n            local quantity = outputContainer.GetQuantity(self.itemNameToId[k])\n            system.print(k .. \": quantity < requested \" .. quantity .. \"<\" .. v)\n            if(quantity < v) then\n              self.refiner.setOutput(self.itemNameToId[k])\n              self.refiner.startFor(1)\n            end\n          end\n        end\n      end\n      \n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Industry\\IndustryStocker.lua ==--\n\n\n--== start file .\\DisplayData.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"../Mock/industry.lua\"\n--==require \"../Utils/IndustryState.lua\"\n--==require \"../Utils/ContainerContents.lua\"\n\nif not DisplayData then\n  DisplayData = {}\n  DisplayData.__index = DisplayData\n\n  ---@param refiner Industry\n  function DisplayData(refiner,types)\n    local self = {\n      refiner = refiner,\n      data = {},\n      types = types or {}\n    }\n    \n    function self.Update()\n      self.data = {}\n      self.data[#self.data + 1] = {\"RefinerState\", IndustryState[self.refiner.getState()]}\n      local inputItem = system.getItem(self.refiner.getInputs()[1][\"id\"])\n      local outputItem = system.getItem(self.refiner.getOutputs()[1][\"id\"])\n    \n      self.data[#self.data + 1] = {\"InputName\", inputItem[\"displayName\"]}\n      self.data[#self.data + 1] = {\"OutputName\", outputItem[\"displayName\"]}\n            \n      self.data[#self.data + 1] = {\"Uptime\", self.refiner.getUptime()}\n            \n      local containerData = ContainerContents({OutputContainer1, OutputContainer2})\n      local contents = containerData.GetContents()\n      \n      --system.print(json.encode(self.types))\n      for k, v in pairs(self.types) do\n        --system.print(\"Checking type: \" .. \"\\\"\" .. v .. \"\\\"\")\n        --system.print(json.encode(contents))\n        if(contents[v]) then\n          --system.print(\"Getting Quantity: \" .. v)\n          self.data[#self.data + 1] = {v,contents[v][\"quantity\"]}\n        else\n          self.data[#self.data + 1] = {v,0}\n        end\n                \n        --system.print(json.encode(self.data[#self.data]))\n      end\n      local displayJson = json.encode(self.data)\n\n      Display.setScriptInput(displayJson)\n    end\n\n    return self\n  end\nend\n\n--== end file .\\DisplayData.lua ==--\n\n\n--== start file ..\\Utils\\ContainerContents.lua ==--\n\n--==require \"./DuElements.lua\"\n\nif not ContainerContents then\n  ContainerContents = {}\n  ContainerContents.__index = ContainerContents\n\n  function ContainerContents(containers)\n    self = {\n        contents = {}\n    }\n        \n    --system.print(json.encode(container.getContent()))\n    for ck, vc in pairs(containers) do\n      --system.print(\"Container: \" .. ck)\n\n      for k, v in pairs(containers[ck].getContent()) do\n        local item = system.getItem(v.id)\n        --system.print(\"  Item = \" .. item.name)\n \n        if(self.contents[item.name]) then\n          system.print(\"Updating existing quantity\")\n          self.contents[item.name][\"quantity\"] = self.contents[item.name][\"quantity\"] + v[\"quantity\"]     \n        else\n          self.contents[item.name] = {\n            displayName = system.getItem(v[\"id\"])[\"displayName\"],\n            id = v[\"id\"], \n            quantity = v[\"quantity\"]\n          }\n        end\n            \n      --system.print(json.encode(self.contents[#self.contents]))\n      end\n    end\n\n    function self.GetQuantity(id)\n            system.print(\"Param id = \" .. id)\n      for k, v in pairs(self.contents) do\n        system.print(\"Id = \" .. v.id)\n        system.print(\"Value = \" .. v.quantity)\n        if(v.id == id) then\n          return v.quantity\n        end\n      end\n    end\n        \n    function self.GetContents()\n      return self.contents\n    end\n        \n    return self\n  end\nend\n\n--== end file ..\\Utils\\ContainerContents.lua ==--\n\n--== start file ..\\Utils\\DuElements.lua ==--\n\nif not DuElements then\n  \nCarbonPure = \"CarbonPure\"\nAluminiumPure = \"AluminiumPure\"\nSiliconPure = \"SiliconPure\"\nIronPure = \"IronPure\"\nOxygenPure = \"OxygenPure\"\nHydrogenPure = \"HydrogenPure\"\n    \nend\n\n--== end file ..\\Utils\\DuElements.lua ==--\n\n--== start file ..\\Utils\\IndustryState.lua ==--\n\nif not IndustryState then\n  IndustryState = {\n   [1] = \"Stopped\",\n   [2] = \"Running\",\n   [3] = \"Missing Ingredient\",\n   [4] = \"Ouptut Full\",\n   [5] = \"No Output Container\",\n   [6] = \"Pending\",\n   [7] = \"Missing Schematic\"\n  }\nend\n\n--== end file ..\\Utils\\IndustryState.lua ==--\n\n\n--== start file .\\unit.onStart__.1.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"./DisplayData.lua\"\n--==require \"../Utils/ContainerContents.lua\"\n--==require \"../Utils/DuElements.lua\"\n--==require \"../Utils/IndustryState.lua\"\n\nunit.setTimer(\"Update\", 10)\nOutputContainer1.updateContent()\nOutputContainer2.updateContent()\n\nunit.setTimer(\"ContainerUpdate\", 31)\n\ndisplayData = DisplayData(\n        Refiner, \n        {\n          AluminiumPure, \n          CarbonPure, \n          IronPure, \n          SiliconPure, \n          OxygenPure, \n          HydrogenPure\n        }\n      )\n\ndisplayData.Update()\n\nstocker = IndustryStocker(\n    Refiner,\n    OutputContainer1,\n    {\n        AluminiumPure = 1000,\n        CarbonPure = 1000, \n        IronPure = 1000, \n        SiliconPure = 1000\n    }\n  )\n\nstocker.Update()\n\n\n--== end file .\\unit.onStart__.1.lua ==--\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"3"},{"code":"--== start file .\\unit.onTimer_tag_.2.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\unit.onTimer_tag_.2.lua ==--","filter":{"args":[{"value":"Update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"},{"code":"OutputContainer1.updateContent()\nOutputContainer2.updateContent()\nstocker.Update()","filter":{"args":[{"value":"ContainerUpdate"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"5"}],"methods":[],"events":[]}
