{"slots":{"0":{"name":"sDisplay","type":{"events":[],"methods":[]}},"1":{"name":"sRefiner","type":{"events":[],"methods":[]}},"2":{"name":"sOutputContainer","type":{"events":[],"methods":[]}},"3":{"name":"sCoreUnit","type":{"events":[],"methods":[]}},"4":{"name":"sDataBank","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--== start file .\\sRefiner.onStatusChanged_status_.0.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\sRefiner.onStatusChanged_status_.0.lua ==--","filter":{"args":[{"value":"status"}],"signature":"onStatusChanged(status)","slotKey":"1"},"key":"0"},{"code":"--== start file .\\sOutputContainer.onContentUpdate__.1.lua ==--\n\ndisplayData.Update()\n\n--== end file .\\sOutputContainer.onContentUpdate__.1.lua ==--","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"2"},"key":"1"},{"code":"\n--== start file ..\\Element\\PureResources.lua ==--\n\nif not PureResources then\n  PureResources = {}\n  PureResources.__index = PureResources\n\n  function PureResources()\n    local self = {\n      idToData = {\n        [2240749601] = { id = 2240749601, displayNameWithSize = \"Pure Aluminium\" },\n        [2112763718] = { id = 2112763718, displayNameWithSize = \"Pure Calcium\" },\n        [159858782] = { id = 159858782, displayNameWithSize = \"Pure Carbon\" },\n        [2147954574] = { id = 2147954574, displayNameWithSize = \"Pure Chromium\" },\n        [2031444137] = { id = 2031444137, displayNameWithSize = \"Pure Cobalt\" },\n        [1466453887] = { id = 1466453887, displayNameWithSize = \"Pure Copper\" },\n        [3323724376] = { id = 3323724376, displayNameWithSize = \"Pure Fluorine\" },\n        [3837955371] = { id = 3837955371, displayNameWithSize = \"Pure Gold\" },\n        [1010524904] = { id = 1010524904, displayNameWithSize = \"Pure Hydrogen\" },\n        [198782496] = { id = 198782496, displayNameWithSize = \"Pure Iron\" },\n        [3810111622] = { id = 3810111622, displayNameWithSize = \"Pure Lithium\" },\n        [2421303625] = { id = 2421303625, displayNameWithSize = \"Pure Manganese\" },\n        [3012303017] = { id = 3012303017, displayNameWithSize = \"Pure Nickel\" },\n        [1126600143] = { id = 1126600143, displayNameWithSize = \"Pure Niobium\" },\n        [947806142] = { id = 947806142, displayNameWithSize = \"Pure Oxygen\" },\n        [3211418846] = { id = 3211418846, displayNameWithSize = \"Pure Scandium\" },\n        [2589986891] = { id = 2589986891, displayNameWithSize = \"Pure Silicon\" },\n        [1807690770] = { id = 1807690770, displayNameWithSize = \"Pure Silver\" },\n        [3603734543] = { id = 3603734543, displayNameWithSize = \"Pure Sodium\" },\n        [3822811562] = { id = 3822811562, displayNameWithSize = \"Pure Sulfur\" },\n        [752542080] = { id = 752542080, displayNameWithSize = \"Pure Titanium\" },\n        [2007627267] = { id = 2007627267, displayNameWithSize = \"Pure Vanadium\" }\n      },\n      displayNameToData = {\n        [\"Pure Aluminium\"] = { id = 2240749601, displayNameWithSize = \"Pure Aluminium\" },\n        [\"Pure Calcium\"] = { id = 2112763718, displayNameWithSize = \"Pure Calcium\" },\n        [\"Pure Carbon\"] = { id = 159858782, displayNameWithSize = \"Pure Carbon\" },\n        [\"Pure Chromium\"] = { id = 2147954574, displayNameWithSize = \"Pure Chromium\" },\n        [\"Pure Cobalt\"] = { id = 2031444137, displayNameWithSize = \"Pure Cobalt\" },\n        [\"Pure Copper\"] = { id = 1466453887, displayNameWithSize = \"Pure Copper\" },\n        [\"Pure Fluorine\"] = { id = 3323724376, displayNameWithSize = \"Pure Fluorine\" },\n        [\"Pure Gold\"] = { id = 3837955371, displayNameWithSize = \"Pure Gold\" },\n        [\"Pure Hydrogen\"] = { id = 1010524904, displayNameWithSize = \"Pure Hydrogen\" },\n        [\"Pure Iron\"] = { id = 198782496, displayNameWithSize = \"Pure Iron\" },\n        [\"Pure Lithium\"] = { id = 3810111622, displayNameWithSize = \"Pure Lithium\" },\n        [\"Pure Manganese\"] = { id = 2421303625, displayNameWithSize = \"Pure Manganese\" },\n        [\"Pure Nickel\"] = { id = 3012303017, displayNameWithSize = \"Pure Nickel\" },\n        [\"Pure Niobium\"] = { id = 1126600143, displayNameWithSize = \"Pure Niobium\" },\n        [\"Pure Oxygen\"] = { id = 947806142, displayNameWithSize = \"Pure Oxygen\" },\n        [\"Pure Scandium\"] = { id = 3211418846, displayNameWithSize = \"Pure Scandium\" },\n        [\"Pure Silicon\"] = { id = 2589986891, displayNameWithSize = \"Pure Silicon\" },\n        [\"Pure Silver\"] = { id = 1807690770, displayNameWithSize = \"Pure Silver\" },\n        [\"Pure Sodium\"] = { id = 3603734543, displayNameWithSize = \"Pure Sodium\" },\n        [\"Pure Sulfur\"] = { id = 3822811562, displayNameWithSize = \"Pure Sulfur\" },\n        [\"Pure Titanium\"] = { id = 752542080, displayNameWithSize = \"Pure Titanium\" },\n        [\"Pure Vanadium\"] = { id = 2007627267, displayNameWithSize = \"Pure Vanadium\" }\n      }\n    }\n\n    function self.GetId(displayName)\n      if(self.displayNameToData[displayName]) then\n        return self.displayNameToData[displayName].id\n      end\n      return -1\n    end\n\n    function self.GetDisplayName(id)\n      if(self.idToData[id]) then\n        return self.idToData[id].displayNameWithSize\n      end\n         \n      local item = system.getItem(id)\n      if(item and item.displayNameWithSize) then\n        return item.displayNameWithSize\n      end\n\n      return \"\"\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Element\\PureResources.lua ==--\n\n--== start file .\\DisplayData.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"../Mock/industry.lua\"\n--==require \"../Industry/IndustryState.lua\"\n--==require \"../Container/ContainerContents.lua\"\n\nif not DisplayData then\n  DisplayData = {}\n  DisplayData.__index = DisplayData\n\n  ---@param refiner Industry\n  function DisplayData(display, resourceMapper,refiner,outputContents,types)\n    local self = {\n      display = display,\n      refiner = refiner,\n      data = {},\n      types = types or {},\n      resourceMapper = resourceMapper,\n      outputContents = outputContents\n    }\n    \n    function self.Update()\n      self.data = {}\n      self.data[#self.data + 1] = {\"RefinerState\", IndustryState[self.refiner.getState()]}\n\n      local inputItemName = self.resourceMapper.GetDisplayName(self.refiner.getInputs()[1].id)\n      local outputItemName = self.resourceMapper.GetDisplayName(self.refiner.getOutputs()[1].id)\n    \n      self.data[#self.data + 1] = {\"Input Item\", inputItemName}\n      self.data[#self.data + 1] = {\"Output Item\", outputItemName}\n            \n      self.data[#self.data + 1] = {\"Uptime\", self.refiner.getCycleCountSinceStartup()}\n      \n      for itemKey, itemValue in pairs(self.types) do\n        self.data[#self.data + 1] = {itemValue, math.floor(outputContents.GetQuantityForName(itemValue))}\n      end\n\n      local displayJson = json.encode(self.data)\n      DebugPrint(\"Refiner.Update(): \" .. displayJson)\n      display.setScriptInput(displayJson)\n    end\n\n    return self\n  end\nend\n\n--== end file .\\DisplayData.lua ==--\n\n--== start file ..\\Data\\DataGrid.lua ==--\n\n--==require \"./DataRow.lua\"\n--==require \"./DataCell.lua\"\n\nif not DataGrid then\n  DataGrid = {}\n  DataGrid.__index = DataGrid\n\n  function DataGrid(rows)\n    self = {\n      [\"data\"] = {\n        rows = rows or {}\n      }\n    }\n\n    function self.AddRow(row)\n      self.data.rows[#self.data.rows + 1] = row\n    end\n\n    function self.NumColumns()\n      if(#self.data.rows \u003e 0) then\n        return self.data.rows[1].NumCells()\n      end\n\n      return 0\n    end\n        \n    function self.NumRows()\n      if(#self.data.rows \u003e 0) then\n        return #self.data.rows\n      end\n      return 0\n    end\n\n    function self.Encode()\n      return self.data.rows.Encode()\n    end\n        \n    function self.GetRows()\n      return self.data.rows\n    end\n\n    function self.FromRowData(rows) \n      for kRow, vRow in rows do\n        local row = DataRow()\n        row.FromData(vRow)\n        self.data.rows[#self.data.rows + 1] = row\n      end\n    end\n\n    function self.Decode(json)\n      obj = json.decode(json)\n      for kRow, vRow in pairs(obj) do\n        local row = DataRow()\n        row.FromData(vRow)\n        self.data.rows[#self.data.rows + 1] = row\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataGrid.lua ==--\n\n--== start file ..\\Data\\DataCell.lua ==--\n\nif not DataCell then\n  DataCell = {}\n  DataCell.__index = DataCell\n\n  DataCellStatusNormal = 1\n  DataCellStatusWarning = 2\n  DataCellStatusAlert = 3\n  DataCellStatusGood = 4\n\n  --@param status string one of Normal, Warning, Alert\n  function DataCell(text, notification)\n    local self = {\n      [\"data\"] = {\n        text = text or \"\",\n        notification = notification or DataCellStatusNormal\n      }\n    }\n\n    function self.GetText()\n      return self.data.text\n    end\n\n    function self.GetStatus()\n      return self.data.status\n    end\n        \n    function self.GetNotification()\n      return self.data.notification\n    end\n\n    function self.GetData()\n      return self.data\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataCell.lua ==--\n\n--== start file ..\\Container\\ContainerContents.lua ==--\n\nif not ContainerContents then\n  ContainerContents = {}\n  ContainerContents.__index = ContainerContents\n\n  function ContainerContents(resourceMapper, containers)\n    self = {\n        contents = {},\n        resourceMapper = resourceMapper,\n        containers = containers\n    }\n\n    function self.Update()\n      self.contents = {}\n      for containerIndex, containerValue in pairs(containers) do\n        containerValue.updateContent()\n        for itemKey, itemValue in pairs(containerValue.getContent()) do\n          local itemName = self.resourceMapper.GetDisplayName(itemValue.id)\n          if(self.contents[itemName]) then\n            self.contents[itemName][\"quantity\"] = self.contents[itemName].quantity + itemValue.quantity    \n          else\n            self.contents[itemName] = {\n              displayName = itemName,\n              id = itemValue.id, \n              quantity = itemValue.quantity\n            }\n          end\n        end\n      end\n    end\n\n    function self.GetQuantityForId(id)\n      local name = self.resourceMapper.GetDisplayName(id)\n      if(name and self.contents[name]) then\n        return self.contents[name].quantity\n      end\n      return 0\n    end\n\n    function self.GetQuantityForName(name)\n      if(name and self.contents[name]) then\n        return self.contents[name].quantity\n      end\n      return 0\n    end\n\n    function self.GetContents()\n      return self.contents\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Container\\ContainerContents.lua ==--\n\n--== start file ..\\Utils\\DUDebug.lua ==--\n\nif not DUDebug then\n  DUDebug = {}\n  DUDebug.__index = DUDebug\n    \n  gDebugPrint = true --export: Enable or Display Debug Printing\n\n  function DebugPrint(message)\n    if(gDebugPrint) then\n      system.print(message)\n    end\n  end\nend\n\n--== end file ..\\Utils\\DUDebug.lua ==--\n\n--== start file ..\\Industry\\IndustryMonitor.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n--==require \"../Data/DataCell.lua\"\n--==require \"./IndustryData.lua\"\n--==require \"./IndustryState.lua\"\n\nif not IndustryMonitor then\n  IndustryMonitor = {}\n  IndustryMonitor.__index = IndustryMonitor\n\n  function IndustryMonitor(name, industryUnit, dataBank)\n    local self = {\n      name = name,\n      industryUnit = industryUnit,\n      dataBank = dataBank\n    }\n        \n    function self.Update()\n      system.print(\"Metalworks: Update()\")\n      if(self.dataBank) then\n        system.print(\"Metalworks: Update() dataBank is not nil\")\n        local data = IndustryData()\n\n        local info = self.industryUnit.getInfo()\n        DebugPrint(self.name .. \": info: \" .. json.encode(info))\n\n        data.name = self.name\n        DebugPrint(\"state: \" .. json.encode(self.industryUnit.getState()))\n        data.status = self.industryUnit.getState()\n        local statusString = IndustryState[data.status]\n        if(statusString == \"Running\") then\n          data.notification = DataCellStatusGood\n        elseif(statusString == \"Stopped\") then\n          data.notification = DataCellStatusNormal\n        else\n          data.notification = DataCellStatusAlert\n        end\n\n        local outputs = self.industryUnit.getOutputs()\n        if(#outputs \u003e 0) then\n          DebugPrint(\"Output: \" .. json.encode(system.getItem(outputs[1].id).displayName))\n          data.product = system.getItem(outputs[1].id).displayName\n        else\n          data.product = \"None\"\n        end\n        local jsonRow = json.encode(data)\n        DebugPrint(self.name .. \".info = \" .. jsonRow)\n        self.dataBank.setStringValue((\"Industry\" .. self.name .. \".info\"), jsonRow)\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Industry\\IndustryMonitor.lua ==--\n\n--== start file ..\\Industry\\IndustryData.lua ==--\n\n--==require \"../Data/DataGrid.lua\"\n--==require \"../Data/DataRow.lua\"\n--==require \"../Data/DataCell.lua\"\n--==require \"./IndustryState.lua\"\n\nif not IndustryData then\n  IndustryData = {}\n  IndustryData.__index = IndustryData\n\n  function IndustryData()\n    local self = {\n      name = \"\",\n      status = \"\",\n      product = \"\",\n      notification = \"\"\n    }\n    \n    return self\n  end\n\n  function IndustryDataToDataGrid(data)\n    dataGrid = DataGrid()\n    for kRow, vRow in pairs(data) do\n      local row = DataRow()\n      local rowData = json.decode(vRow)\n      logMessage(\"Rowdata notification: \" .. rowData.notification)\n      row.AddCell(DataCell(rowData.name, rowData.notification))\n      row.AddCell(DataCell(IndustryState[rowData.status], rowData.notification))\n      row.AddCell(DataCell(rowData.product, rowData.notification))\n      dataGrid.AddRow(row)\n    end\n    return dataGrid\n  end\nend\n\n--== end file ..\\Industry\\IndustryData.lua ==--\n\n--== start file ..\\Industry\\IndustryStocker.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n\nif not IndustryStocker then\n  IndustryStocker = {}\n  IndustryStocker.__index = IndustryStocker\n\n  function IndustryStocker(name, resourceMapper, industryUnit, outputContents, items)\n    local self = {\n      name = name,\n      industryUnit = industryUnit,\n      itemNameAndRequestedQuantity = items,\n      outputContents = outputContents,\n      resourceMapper = resourceMapper\n    }\n        \n    function self.Update()\n      if(IndustryState[self.industryUnit.getState()] ~= \"Running\") then\n        for itemName, itemQuantity in pairs(self.itemNameAndRequestedQuantity) do\n          local quantity = outputContents.GetQuantityForName(itemName)\n          local requested = self.itemNameAndRequestedQuantity[itemName]\n          DebugPrint(self.name .. \": quantity(\" .. quantity .. \") \u003c requested(\" .. requested .. \")\")\n          if(quantity \u003c requested) then\n            DebugPrint(self.name .. \": Setting product to: \" .. itemName)\n            self.industryUnit.setOutput(self.resourceMapper.GetId(itemName))\n            self.industryUnit.startFor(1)\n          end\n        end\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Industry\\IndustryStocker.lua ==--\n\n--== start file ..\\Industry\\IndustryState.lua ==--\n\nif not IndustryState then\n  IndustryState = {\n   [1] = \"Stopped\",\n   [2] = \"Running\",\n   [3] = \"Missing Ingredient\",\n   [4] = \"Ouptut Full\",\n   [5] = \"No Output Container\",\n   [6] = \"Pending\",\n   [7] = \"Missing Schematic\" \n  }\nend\n\n--== end file ..\\Industry\\IndustryState.lua ==--\n\n--== start file ..\\Data\\DataRow.lua ==--\n\n--==require \"./DataCell.lua\"\njson = require(\"dkjson\")\n\nif not DataRow then\n  DataRow = {}\n  DataRow.__index = DataRow\n\n  function DataRow(cells)\n    local self = {\n      [\"data\"] = {\n        cells = cells or {}\n      }\n    }\n\n    function self.AddCell(cell) \n      self.data.cells[#self.data.cells + 1] = cell\n    end\n\n    function self.NumCells()\n      return #self.data.cells\n    end\n\n    function self.GetCells()\n      return self.data.cells\n    end\n\n    function self.FromData(row)\n      for kRow, kValue in pairs(row) do\n        self.data.cells[#self.data.cells + 1] = UiCell(kValue.text, kValue.status)\n      end\n    end\n\n    return self\n  end\nend\n\n--== end file ..\\Data\\DataRow.lua ==--\n\n\n--== start file .\\unit.onStart__.2.lua ==--\n\nlocal json = require(\"dkjson\")\n--==require \"./DisplayData.lua\"\n--==require \"../Container/ContainerContents.lua\"\n--==require \"../Industry/IndustryState.lua\"\n--==require \"../Element/PureResources.lua\"\n--==require \"../Industry/IndustryStocker.lua\"\n--==require \"../Utils/DUDebug.lua\"\n--==require \"../Industry/IndustryMonitor.lua\"\n\nunit.setTimer(\"Update\", 30)\nunit.setTimer(\"ContainerUpdate\", 31)\n\nsOutputContainer.updateContent()\nresourceMapper = PureResources()\n\n-- wrapper around output containers\noutputContents = ContainerContents(resourceMapper, {sOutputContainer})\noutputContents.Update()\n\ndisplayData = DisplayData(\n    sDisplay,\n    resourceMapper,\n    sRefiner,\n    outputContents,\n    {\n      \"Pure Aluminium\",\n      \"Pure Carbon\",\n      \"Pure Iron\",\n      \"Pure Silicon\",\n      \"Pure Hydrogen\",\n      \"Pure Oxygen\"\n    }\n  )\n\nstocker = IndustryStocker(\n    \"Refiner\",\n    resourceMapper,\n    sRefiner,\n    outputContents,\n    {\n        [\"Pure Aluminium\"] = 1000,\n        [\"Pure Carbon\"] = 1000, \n        [\"Pure Iron\"] = 1000, \n        [\"Pure Silicon\"] = 1000\n    }\n  )\n\ndisplayData.Update()\nstocker.Update()\n\n--== end file .\\unit.onStart__.2.lua ==--\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"2"},{"code":"--== start file .\\unit.onTimer_tag_.3.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n\nDebugPrint(\"Container update\")\noutputContents.Update()\nstocker.Update()\n\n--== end file .\\unit.onTimer_tag_.3.lua ==--","filter":{"args":[{"value":"Update"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"},{"code":"--== start file .\\unit.onTimer_tag_.4.lua ==--\n\n--==require \"../Utils/DUDebug.lua\"\n\nDebugPrint(\"Display Update\")\n\ndisplayData.Update()\n\n--== end file .\\unit.onTimer_tag_.4.lua ==--","filter":{"args":[{"value":"ContainerUpdate"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}
